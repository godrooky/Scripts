--!optimize 2
-- Zeta Ultimate HTTP Loadstring Processor v4.1 (Mobile Edition)
-- Features: Mobile-responsive UI, touch controls, and adaptive scaling

local request = (syn and syn.request) or (http and http.request) or http_request
if not request then 
    error("[ZETA CORE] No HTTP library available") 
end

-- ==== MOBILE DETECTION ==== --
local IS_MOBILE = (game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled)
local SCALE_FACTOR = IS_MOBILE and 0.8 or 1.0
local FONT_SIZE_MULTIPLIER = IS_MOBILE and 1.2 or 1.0

-- ==== CONSTANTS ==== --
local MAX_RETRIES = 3
local REQUEST_TIMEOUT = 15
local SAFE_GLOBALS = {
    "print", "warn", "error", "assert",
    "ipairs", "pairs", "next", "type",
    "tostring", "tonumber", "select",
    "math", "table", "string",
    "coroutine.create", "coroutine.resume", "coroutine.yield"
}

-- ==== SECURE SANDBOX ==== --
local function CreateIroncladSandbox()
    local sandbox = {}
    local protected = {
        getfenv = function() return sandbox end,
        setfenv = function() error("setfenv blocked") end,
        require = function() error("require blocked") end,
        newproxy = function() error("newproxy blocked") end
    }

    for _, name in ipairs(SAFE_GLOBALS) do
        local path = name:split(".")
        local current = _G
        for i, part in ipairs(path) do
            current = current[part]
            if not current then break end
        end
        if current then sandbox[name] = current end
    end

    return setmetatable(sandbox, {
        __index = function(_, k)
            if protected[k] then return protected[k] end
            error(string.format("Blocked global access: %s", k))
        end,
        __newindex = function(_, k, _)
            error(string.format("Blocked global write: %s", k))
        end
    })
end

-- ==== ENHANCED HTTP CLIENT ==== --
local function SecureFetch(url)
    local attempts = 0
    local last_error
    
    while attempts < MAX_RETRIES do
        attempts = attempts + 1
        
        local success, response = pcall(function()
            return request({
                Url = url,
                Method = "GET",
                Headers = {
                    ["User-Agent"] = "Zeta-HTTP-Loader/4.1-Mobile",
                    ["X-Zeta-Session"] = tostring(math.random(1e9, 1e10))
                },
                Timeout = REQUEST_TIMEOUT
            })
        end)

        if not success then
            last_error = response
            task.wait(1)
        elseif response.StatusCode == 200 then
            return response.Body
        elseif response.StatusCode >= 300 and response.StatusCode < 400 then
            url = response.Headers.Location or url
            last_error = string.format("Redirect to: %s", url)
        else
            last_error = string.format("HTTP %d: %s", response.StatusCode, response.StatusMessage)
        end
    end

    error(string.format("Failed after %d attempts: %s", MAX_RETRIES, last_error))
end

-- ==== MOBILE-OPTIMIZED GUI ==== --
local function CreateMobileLoaderGUI()
    local gui = Instance.new("ScreenGui")
    gui.Name = "ZetaLoaderMobile"
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.ResetOnSpawn = false

    -- Adaptive sizing
    local screenWidth = workspace.CurrentCamera.ViewportSize.X
    local frameWidth = math.min(500 * SCALE_FACTOR, screenWidth * 0.9)
    local frameHeight = 600 * SCALE_FACTOR
    local fontSize = math.floor(14 * FONT_SIZE_MULTIPLIER)
    local buttonHeight = IS_MOBILE and 50 or 40

    -- Main container
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, frameWidth, 0, frameHeight)
    frame.Position = UDim2.new(0.5, -frameWidth/2, 0.5, -frameHeight/2)
    frame.BackgroundColor3 = Color3.fromRGB(15, 15, 25)
    frame.BackgroundTransparency = 0.1

    -- Mobile-specific styling
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, IS_MOBILE and 8 or 12)
    corner.Parent = frame

    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(60, 60, 80)
    stroke.Thickness = IS_MOBILE and 1 or 2
    stroke.Parent = frame

    -- Header with larger touch area for mobile
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, IS_MOBILE and 50 or 40)
    header.BackgroundColor3 = Color3.fromRGB(10, 10, 20)

    local title = Instance.new("TextLabel")
    title.Text = IS_MOBILE and "ZETA MOBILE v4.1" or "ZETA LOADER PRO v4.1"
    title.Font = Enum.Font.GothamBold
    title.TextSize = IS_MOBILE and 18 or 16
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Size = UDim2.new(1, -50, 1, 0)
    title.BackgroundTransparency = 1

    local closeBtn = Instance.new("ImageButton")
    closeBtn.Image = "rbxassetid://3926305904"
    closeBtn.ImageRectOffset = Vector2.new(284, 4)
    closeBtn.ImageRectSize = Vector2.new(24, 24)
    closeBtn.Position = UDim2.new(1, -35, 0.5, -12)
    closeBtn.Size = UDim2.new(0, IS_MOBILE and 30 or 24, 0, IS_MOBILE and 30 or 24)
    closeBtn.BackgroundTransparency = IS_MOBILE and 0.5 or 1
    closeBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    if IS_MOBILE then
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(1, 0)
        btnCorner.Parent = closeBtn
    end

    -- Input section with larger touch targets
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Text = "Script URL:"
    inputLabel.Font = Enum.Font.Gotham
    inputLabel.TextSize = fontSize
    inputLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    inputLabel.Size = UDim2.new(1, -20, 0, 25 * FONT_SIZE_MULTIPLIER)
    inputLabel.Position = UDim2.new(0, 10, 0, IS_MOBILE and 60 or 45)
    inputLabel.BackgroundTransparency = 1
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left

    local urlBox = Instance.new("TextBox")
    urlBox.PlaceholderText = "https://raw.githubusercontent.com/..."
    urlBox.Size = UDim2.new(1, -20, 0, IS_MOBILE and 45 or 35)
    urlBox.Position = UDim2.new(0, 10, 0, IS_MOBILE and 90 or 70)
    urlBox.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    urlBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    urlBox.Font = Enum.Font.RobotoMono
    urlBox.TextSize = fontSize
    urlBox.ClearTextOnFocus = false
    if IS_MOBILE then
        urlBox.TextWrapped = true
        urlBox.MultiLine = true
    end

    -- Progress display
    local progressFrame = Instance.new("Frame")
    progressFrame.Size = UDim2.new(1, -20, 0, 20 * FONT_SIZE_MULTIPLIER)
    progressFrame.Position = UDim2.new(0, 10, 0, IS_MOBILE and 150 or 115)
    progressFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    progressFrame.BorderSizePixel = 0

    local progressBar = Instance.new("Frame")
    progressBar.Size = UDim2.new(0, 0, 1, 0)
    progressBar.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    progressBar.BorderSizePixel = 0

    local progressLabel = Instance.new("TextLabel")
    progressLabel.Text = "Ready"
    progressLabel.Size = UDim2.new(1, 0, 1, 0)
    progressLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    progressLabel.BackgroundTransparency = 1
    progressLabel.Font = Enum.Font.Gotham
    progressLabel.TextSize = fontSize

    -- Log display with mobile-optimized scrolling
    local logFrame = Instance.new("ScrollingFrame")
    logFrame.Size = UDim2.new(1, -20, 0, IS_MOBILE and 250 or 300)
    logFrame.Position = UDim2.new(0, 10, 0, IS_MOBILE and 180 or 140)
    logFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    logFrame.ScrollBarThickness = IS_MOBILE and 10 or 6
    logFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    logFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    logFrame.VerticalScrollBarInset = IS_MOBILE and Enum.ScrollBarInset.Always or Enum.ScrollBarInset.ScrollBar

    local logContent = Instance.new("TextLabel")
    logContent.Size = UDim2.new(1, 0, 0, 0)
    logContent.Text = ""
    logContent.TextColor3 = Color3.fromRGB(220, 220, 220)
    logContent.Font = Enum.Font.RobotoMono
    logContent.TextSize = fontSize - (IS_MOBILE and 0 or 2)
    logContent.TextXAlignment = Enum.TextXAlignment.Left
    logContent.TextYAlignment = Enum.TextYAlignment.Top
    logContent.TextWrapped = true
    logContent.AutomaticSize = Enum.AutomaticSize.Y
    logContent.BackgroundTransparency = 1

    -- Mobile-optimized buttons
    local executeBtn = Instance.new("TextButton")
    executeBtn.Text = "EXECUTE"
    executeBtn.Size = UDim2.new(0.45, 0, 0, buttonHeight)
    executeBtn.Position = UDim2.new(0.025, 0, 1, -buttonHeight-10)
    executeBtn.BackgroundColor3 = Color3.fromRGB(0, 100, 0)
    executeBtn.Font = Enum.Font.GothamBold
    executeBtn.TextSize = fontSize + 2
    executeBtn.AutoButtonColor = not IS_MOBILE

    local clearBtn = Instance.new("TextButton")
    clearBtn.Text = "CLEAR LOG"
    clearBtn.Size = UDim2.new(0.45, 0, 0, buttonHeight)
    clearBtn.Position = UDim2.new(0.525, 0, 1, -buttonHeight-10)
    clearBtn.BackgroundColor3 = Color3.fromRGB(100, 0, 0)
    clearBtn.Font = Enum.Font.Gotham
    clearBtn.TextSize = fontSize + 2
    clearBtn.AutoButtonColor = not IS_MOBILE

    -- Mobile touch effects
    if IS_MOBILE then
        local function createRippleEffect(button)
            local ripple = Instance.new("Frame")
            ripple.Size = UDim2.new(0, 0, 0, 0)
            ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
            ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ripple.BackgroundTransparency = 0.8
            ripple.ZIndex = 10
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(1, 0)
            corner.Parent = ripple
            ripple.Parent = button
            
            return ripple
        end

        executeBtn.MouseButton1Down:Connect(function()
            local ripple = createRippleEffect(executeBtn)
            ripple:TweenSize(UDim2.new(2,0,2,0), "Out", "Quad", 0.5, true)
            ripple:TweenSize(UDim2.new(0,0,0,0), "Out", "Quad", 0.5, true, function()
                ripple:Destroy()
            end)
        end)

        clearBtn.MouseButton1Down:Connect(function()
            local ripple = createRippleEffect(clearBtn)
            ripple:TweenSize(UDim2.new(2,0,2,0), "Out", "Quad", 0.5, true)
            ripple:TweenSize(UDim2.new(0,0,0,0), "Out", "Quad", 0.5, true, function()
                ripple:Destroy()
            end)
        end)
    end

    -- Assembly
    header.Parent = frame
    title.Parent = header
    closeBtn.Parent = header

    inputLabel.Parent = frame
    urlBox.Parent = frame

    progressBar.Parent = progressFrame
    progressLabel.Parent = progressFrame
    progressFrame.Parent = frame

    logContent.Parent = logFrame
    logFrame.Parent = frame

    executeBtn.Parent = frame
    clearBtn.Parent = frame

    frame.Parent = gui
    gui.Parent = game:GetService("CoreGui")

    -- ==== GUI FUNCTIONALITY ==== --
    local function AddLog(message, color)
        color = color or Color3.fromRGB(220, 220, 220)
        local timestamp = os.date("[%H:%M:%S]")
        logContent.Text = logContent.Text .. string.format("\n<font color='#%s'>%s %s</font>", 
            color:ToHex(), timestamp, message)
        task.defer(function()
            logFrame.CanvasPosition = Vector2.new(0, logContent.AbsoluteSize.Y)
        end)
    end

    local function UpdateProgress(percent, message)
        progressBar:TweenSize(UDim2.new(percent/100, 0, 1, 0), "Out", "Quad", 0.2, true)
        progressLabel.Text = message or "Processing..."
    end

    -- Mobile keyboard handling
    if IS_MOBILE then
        urlBox.Focused:Connect(function()
            game:GetService("UserInputService").OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.ForceHide
        end)
        
        urlBox.FocusLost:Connect(function()
            game:GetService("UserInputService").OverrideMouseIconBehavior = Enum.OverrideMouseIconBehavior.None
        end)
    end

    executeBtn.MouseButton1Click:Connect(function()
        local url = urlBox.Text
        
        -- Validate URL
        if not url:match("^https?://") then
            AddLog("Invalid URL format", Color3.fromRGB(255, 100, 100))
            return
        end

        -- Async execution
        task.spawn(function()
            AddLog("Starting process...", Color3.fromRGB(200, 200, 255))
            
            local success, result = pcall(function()
                local code = SecureFetch(url)
                return ExecuteWithProgress(code, UpdateProgress)
            end)

            if success then
                AddLog("Execution successful!", Color3.fromRGB(100, 255, 100))
            else
                AddLog(string.format("Error: %s", result), Color3.fromRGB(255, 100, 100))
                UpdateProgress(0, "Failed")
            end
        end)
    end)

    clearBtn.MouseButton1Click:Connect(function()
        logContent.Text = ""
        AddLog("Log cleared", Color3.fromRGB(200, 200, 200))
    end)

    closeBtn.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)

    -- Initialization
    AddLog("System initialized", Color3.fromRGB(100, 200, 255))
    AddLog(IS_MOBILE and "Mobile mode activated" or "Desktop mode activated", Color3.fromRGB(150, 150, 255))
end

-- ==== EXECUTION PIPELINE ==== --
local function ExecuteWithProgress(code, updateCallback)
    updateCallback(10, "Validating syntax...")
    if code:match("__gc") or code:match("debug%.getregistry") then
        error("Dangerous patterns detected")
    end

    updateCallback(30, "Compiling...")
    local fn, err = loadstring(code)
    if not fn then error(err) end

    updateCallback(60, "Preparing environment...")
    setfenv(fn, CreateIroncladSandbox())

    updateCallback(90, "Executing...")
    local success, result = pcall(fn)
    if not success then error(result) end

    updateCallback(100, "Complete!")
    return result
end

-- ==== MAIN EXECUTION ==== --
CreateMobileLoaderGUI()
