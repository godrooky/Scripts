--!optimize 2
-- Zeta Deobfuscator GUI v9.0 (Mobile Edition)
-- Features: Military-grade error handling, mobile optimization, adaptive UI

-- Localize frequently used services
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

--- ==== LOGGER MODULE ==== ---
local Logger = {
    logs = {},
    maxLogs = 200,
    
    add = function(self, message, level)
        level = level or "INFO"
        local timestamp = os.date("[%H:%M:%S]")
        local entry = string.format("%s [%s] %s", timestamp, level, message)
        
        -- Rotate logs if exceeding maximum
        if #self.logs >= self.maxLogs then
            table.remove(self.logs, 1)
        end
        table.insert(self.logs, entry)
        
        return entry
    end,
    
    flush = function(self)
        return table.concat(self.logs, "\n")
    end
}

--- ==== OPTIMIZED DECODER MODULE ==== ---
local Decoders = {
    -- Ultra-efficient Base64 decoder using lookup tables
    base64 = function(encoded)
        if not encoded or type(encoded) ~= "string" then
            return nil, "Invalid input type"
        end
        
        -- Cache the decode table
        local b64 = {
            ['A']=0,['B']=1,['C']=2,['D']=3,['E']=4,['F']=5,['G']=6,['H']=7,
            ['I']=8,['J']=9,['K']=10,['L']=11,['M']=12,['N']=13,['O']=14,['P']=15,
            ['Q']=16,['R']=17,['S']=18,['T']=19,['U']=20,['V']=21,['W']=22,['X']=23,
            ['Y']=24,['Z']=25,['a']=26,['b']=27,['c']=28,['d']=29,['e']=30,['f']=31,
            ['g']=32,['h']=33,['i']=34,['j']=35,['k']=36,['l']=37,['m']=38,['n']=39,
            ['o']=40,['p']=41,['q']=42,['r']=43,['s']=44,['t']=45,['u']=46,['v']=47,
            ['w']=48,['x']=49,['y']=50,['z']=51,['0']=52,['1']=53,['2']=54,['3']=55,
            ['4']=56,['5']=57,['6']=58,['7']=59,['8']=60,['9']=61,['+']=62,['/']=63
        }
        
        encoded = encoded:gsub("[^%w%+/=]", "")
        local result = {}
        local i = 1
        
        while i <= #encoded do
            local c1 = b64[encoded:sub(i,i)] or 0
            local c2 = b64[encoded:sub(i+1,i+1)] or 0
            local c3 = b64[encoded:sub(i+2,i+2)] or 0
            local c4 = b64[encoded:sub(i+3,i+3)] or 0
            
            table.insert(result, string.char(
                bit32.bor(bit32.lshift(c1, 2), bit32.rshift(c2, 4))
            ))
            
            if c3 then
                table.insert(result, string.char(
                    bit32.bor(bit32.lshift(c2, 4), bit32.rshift(c3, 2))
                ))
            end
            
            if c4 then
                table.insert(result, string.char(
                    bit32.bor(bit32.lshift(c3, 6), c4)
                ))
            end
            
            i = i + 4
        end
        
        return table.concat(result)
    end,
    
    -- Optimized hex decoder with validation
    hex = function(encoded)
        if not encoded or #encoded % 2 ~= 0 then
            return nil, "Invalid hex string length"
        end
        
        local result = {}
        for i = 1, #encoded, 2 do
            local byte = tonumber(encoded:sub(i,i+1), 16)
            if not byte then
                return nil, "Invalid hex byte at position "..i
            end
            table.insert(result, string.char(byte))
        end
        
        return table.concat(result)
    end
}

--- ==== DEOBFUSCATION ENGINE ==== ---
local Deobfuscator = {
    variableMap = {},
    lastVarId = 0,
    
    -- Enhanced error handling for string decoding
    decodeStrings = function(self, code)
        local replacements = {}
        local success, err
        
        -- Process all string literals
        for quoted in code:gmatch('(["\'])(.-)%1') do
            local quote, content = quoted[1], quoted[2]
            local decoded
            
            -- Hex detection (\xAB)
            if content:find("\\x%x%x") then
                decoded, err = Decoders.hex(content:gsub("\\x", ""))
                if not decoded then
                    Logger:add("Hex decode failed: "..err, "WARN")
                end
            
            -- Base64 detection
            elseif content:match("^[A-Za-z0-9+/]+=?=?$") then
                decoded, err = Decoders.base64(content)
                if not decoded then
                    Logger:add("Base64 decode failed: "..err, "WARN")
                end
            end
            
            if decoded then
                table.insert(replacements, {
                    original = quote..content..quote,
                    replacement = quote..decoded..quote
                })
            end
        end
        
        -- Apply replacements safely
        for _, rep in ipairs(replacements) do
            code = code:gsub(rep.original:gsub("%p", "%%%0"), rep.replacement, 1)
        end
        
        return code
    end,
    
    -- Improved variable renaming with tracking
    renameVariables = function(self, code)
        self.variableMap = {}
        self.lastVarId = 0
        
        -- Pattern 1: _0x1a2b3c
        code = code:gsub("(_0x%x+)", function(match)
            if not self.variableMap[match] then
                self.lastVarId = self.lastVarId + 1
                self.variableMap[match] = string.format("var_%d", self.lastVarId)
            end
            return self.variableMap[match]
        end)
        
        -- Pattern 2: _[1] array access
        code = code:gsub("(_%[%d+%])", function(match)
            local num = match:match("%d+")
            return string.format("arr_%s", num)
        end)
        
        return code
    end,
    
    -- Main processing with error protection
    process = function(self, code)
        if type(code) ~= "string" then
            return nil, "Input must be a string"
        end
        
        if #code < 10 then
            return nil, "Input too short to be obfuscated code"
        end
        
        local steps = {
            {name = "String Decoding", func = self.decodeStrings},
            {name = "Variable Renaming", func = self.renameVariables}
        }
        
        for _, step in ipairs(steps) do
            local success, result = xpcall(
                step.func,
                function(err)
                    return string.format("%s failed: %s", step.name, err)
                end,
                self, code
            )
            
            if not success then
                Logger:add(result, "ERROR")
                return nil, result
            end
            
            code = result
            Logger:add(string.format("%s completed", step.name), "DEBUG")
        end
        
        -- Final formatting passes
        code = self:formatCode(code)
        
        return code
    end,
    
    -- Optimized code formatting
    formatCode = function(self, code)
        -- Multi-pass formatting for better results
        code = code:gsub("%s+", " ")                -- Collapse whitespace
                  :gsub("%s*([%;%,%)%}])%s*", "%1") -- Clean right side
                  :gsub("([%(%{%[])%s*", "%1")      -- Clean left side
                  :gsub("\n%s*\n", "\n")            -- Remove empty lines
        
        return code
    end
}

--- ==== MOBILE-OPTIMIZED UI BUILDER ==== ---
local UIBuilder = {
    -- Cache common UI properties
    colors = {
        background = Color3.fromRGB(20, 20, 30),
        panel = Color3.fromRGB(25, 25, 35),
        accent = Color3.fromRGB(0, 150, 255),
        text = Color3.fromRGB(220, 220, 220)
    },
    
    -- Detect mobile platform
    isMobile = UserInputService.TouchEnabled,
    
    -- Dynamic sizing for mobile
    getScreenScale = function(self)
        return self.isMobile and 0.8 or 1.0
    end,
    
    createWindow = function(self)
        local screenScale = self:getScreenScale()
        local gui = Instance.new("ScreenGui")
        gui.Name = "ZetaDeobfuscatorMobile"
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        gui.ResetOnSpawn = false
        
        local mainFrame = self:createFrame("MainWindow", UDim2.new(0, 450 * screenScale, 0, 650 * screenScale), {
            BackgroundColor3 = self.colors.background,
            Position = UDim2.new(0.5, -225 * screenScale, 0.5, -325 * screenScale),
            AnchorPoint = Vector2.new(0.5, 0.5)
        }, gui)
        
        self:createTitleBar(mainFrame)
        
        local inputSection = self:createInputSection(mainFrame)
        local outputSection = self:createOutputSection(mainFrame)
        self:createActionButtons(mainFrame, inputSection.inputBox, outputSection.outputContent)
        
        return gui
    end,
    
    createFrame = function(self, name, size, props, parent)
        local frame = Instance.new("Frame")
        frame.Name = name
        frame.Size = size
        
        -- Apply properties efficiently
        for prop, value in pairs(props) do
            frame[prop] = value
        end
        
        -- Reusable UI elements
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 12)
        corner.Parent = frame
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = self.colors.panel
        stroke.Thickness = 2
        stroke.Parent = frame
        
        if parent then
            frame.Parent = parent
        end
        
        return frame
    end,
    
    createTitleBar = function(self, parent)
        local titleBar = self:createFrame("TitleBar", UDim2.new(1, 0, 0, 50), {
            BackgroundColor3 = Color3.fromRGB(15, 15, 25),
            Parent = parent
        })
        
        local title = Instance.new("TextLabel")
        title.Name = "Title"
        title.Text = "ZETA DEOBFUSCATOR v9.0 (MOBILE)"
        title.Font = Enum.Font.GothamBold
        title.TextSize = 18
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.Size = UDim2.new(1, -40, 1, 0)
        title.BackgroundTransparency = 1
        title.Parent = titleBar
        
        local closeBtn = Instance.new("ImageButton")
        closeBtn.Name = "CloseButton"
        closeBtn.Image = "rbxassetid://3926305904"
        closeBtn.ImageRectOffset = Vector2.new(284, 4)
        closeBtn.ImageRectSize = Vector2.new(24, 24)
        closeBtn.Position = UDim2.new(1, -30, 0.5, -12)
        closeBtn.Size = UDim2.new(0, 24, 0, 24)
        closeBtn.BackgroundTransparency = 1
        closeBtn.Parent = titleBar
        
        -- Draggable window implementation (disabled on mobile)
        if not self.isMobile then
            local dragging, dragInput, dragStart, startPos
            titleBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    dragStart = input.Position
                    startPos = parent.Position
                    
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local delta = input.Position - dragStart
                    parent.Position = UDim2.new(
                        startPos.X.Scale, startPos.X.Offset + delta.X,
                        startPos.Y.Scale, startPos.Y.Offset + delta.Y
                    )
                end
            end)
        end
        
        closeBtn.MouseButton1Click:Connect(function()
            parent:Destroy()
        end)
    end,
    
    createInputSection = function(self, parent)
        local container = self:createFrame("InputSection", UDim2.new(1, -20, 0, 200), {
            Position = UDim2.new(0, 10, 0, 55),
            BackgroundTransparency = 1,
            Parent = parent
        })
        
        local label = Instance.new("TextLabel")
        label.Name = "InputLabel"
        label.Text = "Obfuscated Script:"
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextColor3 = self.colors.text
        label.Size = UDim2.new(1, 0, 0, 25)
        label.BackgroundTransparency = 1
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = container
        
        local inputBox = Instance.new("TextBox")
        inputBox.Name = "InputBox"
        inputBox.PlaceholderText = "Paste obfuscated loadstring here..."
        inputBox.Size = UDim2.new(1, 0, 1, -30)
        inputBox.Position = UDim2.new(0, 0, 0, 30)
        inputBox.BackgroundColor3 = self.colors.panel
        inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        inputBox.Font = Enum.Font.RobotoMono
        inputBox.TextSize = 14
        inputBox.MultiLine = true
        inputBox.TextWrapped = true
        inputBox.ClearTextOnFocus = false
        inputBox.TextXAlignment = Enum.TextXAlignment.Left
        inputBox.TextYAlignment = Enum.TextYAlignment.Top
        inputBox.Parent = container
        
        Instance.new("UICorner", inputBox).CornerRadius = UDim.new(0, 8)
        
        -- Mobile-specific optimizations
        if self.isMobile then
            inputBox.TextScaled = true
            inputBox.TextSize = 12
        end
        
        return {
            container = container,
            inputBox = inputBox
        }
    end,
    
    createOutputSection = function(self, parent)
        local container = self:createFrame("OutputSection", UDim2.new(1, -20, 0, 300), {
            Position = UDim2.new(0, 10, 0, 265),
            BackgroundTransparency = 1,
            Parent = parent
        })
        
        local label = Instance.new("TextLabel")
        label.Name = "OutputLabel"
        label.Text = "Deobfuscated Script:"
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextColor3 = self.colors.text
        label.Size = UDim2.new(1, 0, 0, 25)
        label.BackgroundTransparency = 1
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = container
        
        local scrollFrame = Instance.new("ScrollingFrame")
        scrollFrame.Name = "OutputScroll"
        scrollFrame.Size = UDim2.new(1, 0, 1, -30)
        scrollFrame.Position = UDim2.new(0, 0, 0, 30)
        scrollFrame.BackgroundColor3 = self.colors.panel
        scrollFrame.ScrollBarThickness = 8
        scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
        scrollFrame.Parent = container
        
        local outputContent = Instance.new("TextLabel")
        outputContent.Name = "OutputContent"
        outputContent.Size = UDim2.new(1, -10, 0, 0)
        outputContent.Position = UDim2.new(0, 5, 0, 5)
        outputContent.Text = ""
        outputContent.TextColor3 = self.colors.text
        outputContent.Font = Enum.Font.RobotoMono
        outputContent.TextSize = 14
        outputContent.TextXAlignment = Enum.TextXAlignment.Left
        outputContent.TextYAlignment = Enum.TextYAlignment.Top
        outputContent.TextWrapped = true
        outputContent.AutomaticSize = Enum.AutomaticSize.Y
        outputContent.BackgroundTransparency = 1
        outputContent.Parent = scrollFrame
        
        Instance.new("UICorner", scrollFrame).CornerRadius = UDim.new(0, 8)
        
        -- Mobile-specific optimizations
        if self.isMobile then
            outputContent.TextScaled = true
            outputContent.TextSize = 12
        end
        
        return {
            container = container,
            outputContent = outputContent
        }
    end,
    
    createActionButtons = function(self, parent, inputBox, outputContent)
        local container = self:createFrame("ButtonContainer", UDim2.new(1, -20, 0, 60), {
            Position = UDim2.new(0, 10, 1, -70),
            BackgroundTransparency = 1,
            Parent = parent
        })
        
        local deobfuscateBtn = Instance.new("TextButton")
        deobfuscateBtn.Name = "DeobfuscateButton"
        deobfuscateBtn.Text = "DEOBFUSCATE"
        deobfuscateBtn.Size = UDim2.new(0.45, 0, 1, 0)
        deobfuscateBtn.Position = UDim2.new(0, 0, 0, 0)
        deobfuscateBtn.BackgroundColor3 = Color3.fromRGB(0, 100, 0)
        deobfuscateBtn.Font = Enum.Font.GothamBold
        deobfuscateBtn.TextSize = 16
        deobfuscateBtn.TextScaled = self.isMobile
        deobfuscateBtn.Parent = container
        
        local copyBtn = Instance.new("TextButton")
        copyBtn.Name = "CopyButton"
        copyBtn.Text = "COPY CLEAN CODE"
        copyBtn.Size = UDim2.new(0.45, 0, 1, 0)
        copyBtn.Position = UDim2.new(0.55, 0, 0, 0)
        copyBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 100)
        copyBtn.Font = Enum.Font.Gotham
        copyBtn.TextSize = 16
        copyBtn.TextScaled = self.isMobile
        copyBtn.Parent = container
        
        -- Shared corner instance
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = deobfuscateBtn
        corner:Clone().Parent = copyBtn
        
        -- Button functionality with enhanced feedback
        local function updateOutput(text)
            outputContent.Text = text
            task.defer(function()
                outputContent.Parent.CanvasPosition = Vector2.new(0, outputContent.AbsoluteSize.Y)
            end)
        end
        
        deobfuscateBtn.MouseButton1Click:Connect(function()
            local code = inputBox.Text
            if #code < 10 then
                updateOutput("Error: Input too short (min 10 chars)")
                return
            end
            
            -- Visual feedback
            local originalText = deobfuscateBtn.Text
            deobfuscateBtn.Text = "PROCESSING..."
            deobfuscateBtn.AutoButtonColor = false
            
            -- Animate button
            TweenService:Create(deobfuscateBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(0, 70, 0)
            }):Play()
            
            task.spawn(function()
                local cleanCode, err = Deobfuscator:process(code)
                
                -- Restore button state
                TweenService:Create(deobfuscateBtn, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(0, 100, 0)
                }):Play()
                
                deobfuscateBtn.Text = originalText
                deobfuscateBtn.AutoButtonColor = true
                
                if cleanCode then
                    updateOutput(cleanCode)
                    Logger:add("Deobfuscation successful", "INFO")
                else
                    updateOutput("Error: "..tostring(err))
                    Logger:add("Deobfuscation failed: "..err, "ERROR")
                end
            end)
        end)
        
        copyBtn.MouseButton1Click:Connect(function()
            if #outputContent.Text > 0 then
                setclipboard(outputContent.Text)
                
                -- Visual feedback
                local originalText = copyBtn.Text
                copyBtn.Text = "COPIED!"
                copyBtn.AutoButtonColor = false
                
                TweenService:Create(copyBtn, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(80, 80, 150)
                }):Play()
                
                task.delay(1.5, function()
                    TweenService:Create(copyBtn, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 100)
                    }):Play()
                    copyBtn.Text = originalText
                    copyBtn.AutoButtonColor = true
                end)
            end
        end)
    end
}

--- ==== MAIN EXECUTION ==== ---
local function initialize()
    local gui = UIBuilder:createWindow()
    gui.Parent = CoreGui
    
    -- Set initial message
    local outputContent = gui:FindFirstChild("MainWindow", true)
                         :FindFirstChild("OutputSection", true)
                         :FindFirstChild("OutputScroll", true)
                         :FindFirstChild("OutputContent", true)
    outputContent.Text = "Paste obfuscated code above and click Deobfuscate"
    
    Logger:add("Zeta Deobfuscator (Mobile) initialized", "INFO")
end

-- Start the application
initialize()
