--!optimize 2
-- Zeta Advanced HTTP Loadstring Processor v2.0
-- Features: Safe execution, progress tracking, and military-grade reliability

local request = (syn and syn.request) or (http and http.request) or http_request
if not request then error("HTTP functions not available") end

-- ==== SECURE ENVIRONMENT ==== --
local ZetaEnv = {
    print = print,
    warn = warn,
    error = error,
    getgenv = getgenv,
    loadstring = loadstring,
    pcall = pcall,
    setfenv = setfenv,
    setmetatable = setmetatable
}

-- ==== PROGRESS TRACKER ==== --
local function CreateProgressUI()
    local progressUI = Instance.new("ScreenGui")
    progressUI.Name = "ZetaProgress"
    progressUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 60)
    frame.Position = UDim2.new(0.5, -150, 0.8, -30)
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    
    local label = Instance.new("TextLabel")
    label.Text = "Processing..."
    label.Size = UDim2.new(1, 0, 0.5, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    
    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(0, 0, 0, 10)
    bar.Position = UDim2.new(0, 0, 0.6, 0)
    bar.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    bar.BorderSizePixel = 0
    
    frame.Parent = progressUI
    label.Parent = frame
    bar.Parent = frame
    progressUI.Parent = game:GetService("CoreGui")
    
    return {
        Update = function(progress, message)
            label.Text = message or "Processing..."
            bar.Size = UDim2.new(progress, 0, 0, 10)
        end,
        Destroy = function()
            progressUI:Destroy()
        end
    }
end

-- ==== SAFE FETCH ==== --
local function FetchScript(url)
    local progress = CreateProgressUI()
    progress.Update(0.1, "Validating URL...")
    
    -- URL validation
    if not url:match("^https?://") then
        progress.Destroy()
        error("Invalid URL protocol")
    end
    
    progress.Update(0.3, "Connecting to server...")
    
    local success, response = pcall(function()
        return request({
            Url = url,
            Method = "GET",
            Headers = {
                ["User-Agent"] = "Zeta-HTTP-Loader/2.0"
            }
        })
    end)
    
    if not success then
        progress.Destroy()
        error("Network error: "..response)
    end
    
    progress.Update(0.7, "Processing response...")
    
    if response.StatusCode ~= 200 then
        progress.Destroy()
        error("HTTP "..response.StatusCode.." - "..response.StatusMessage)
    end
    
    progress.Update(1, "Done!")
    task.wait(0.5)
    progress.Destroy()
    
    return response.Body
end

-- ==== SECURE EXECUTION ==== --
local function ExecuteSafely(code)
    local progress = CreateProgressUI()
    
    -- Phase 1: Sanitization
    progress.Update(0.2, "Sanitizing code...")
    code = code:gsub("__gc", "--GC_REMOVED"):gsub("debug%.", "--DEBUG_REMOVED")
    
    -- Phase 2: Compilation
    progress.Update(0.5, "Compiling...")
    local fn, err = loadstring(code)
    if not fn then
        progress.Destroy()
        error("Compile error: "..err)
    end
    
    -- Phase 3: Sandboxing
    progress.Update(0.8, "Initializing sandbox...")
    setfenv(fn, setmetatable({}, {
        __index = ZetaEnv,
        __newindex = function(t, k, v)
            if ZetaEnv[k] ~= nil then
                error("Attempt to modify protected ZetaEnv")
            end
            rawset(t, k, v)
        end
    }))
    
    -- Phase 4: Execution
    progress.Update(0.9, "Executing...")
    local success, result = pcall(fn)
    
    progress.Destroy()
    
    if not success then
        error("Runtime error: "..result)
    end
    
    return result
end

-- ==== MAIN FUNCTION ==== --
local function ProcessURL(url)
    local startTime = os.clock()
    
    local success, result = pcall(function()
        local code = FetchScript(url)
        return ExecuteSafely(code)
    end)
    
    local elapsed = os.clock() - startTime
    print(string.format("Process completed in %.2f seconds", elapsed))
    
    if not success then
        warn("[ZETA ERROR] "..result)
        return false
    end
    
    return true
end

-- Example usage:
-- ProcessURL("https://raw.githubusercontent.com/godrooky/Scripts/refs/heads/main/Deobfuscator")
