--!optimize 2
-- Hyperion X9000 - Ultimate Lua Deobfuscation Suite
-- Designed for: Luarmor, Prometheus, Moonsec v1-v3, and all major obfuscators
-- Execution: LocalScript compatible for all major executors

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

--- ==== CONSTANTS ==== ---
local COLOR_PALETTE = {
    DARK_1 = Color3.fromRGB(12, 12, 18),
    DARK_2 = Color3.fromRGB(18, 18, 25),
    DARK_3 = Color3.fromRGB(25, 25, 35),
    ACCENT_1 = Color3.fromRGB(0, 150, 255),
    ACCENT_2 = Color3.fromRGB(0, 200, 150),
    ERROR = Color3.fromRGB(255, 50, 80),
    SUCCESS = Color3.fromRGB(50, 255, 100),
    WARNING = Color3.fromRGB(255, 165, 0),
    TEXT_MAIN = Color3.fromRGB(220, 220, 230),
    TEXT_DIM = Color3.fromRGB(150, 150, 160)
}

local FONT_PALETTE = {
    TITLE = Enum.Font.GothamBlack,
    HEADER = Enum.Font.GothamBold,
    BODY = Enum.Font.Gotham,
    CODE = Enum.Font.RobotoMono,
    UI = Enum.Font.SourceSans
}

local ICONS = {
    CLOSE = "rbxassetid://3926305904",
    MINIMIZE = "rbxassetid://3926305904",
    SETTINGS = "rbxassetid://3926305904",
    EXPAND = "rbxassetid://3926305904",
    COLLAPSE = "rbxassetid://3926305904"
}

--- ==== UTILITIES ==== ---
local Utilities = {}

function Utilities.create(instanceType, properties)
    local obj = Instance.new(instanceType)
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
    return obj
end

function Utilities.tween(object, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        easingStyle or Enum.EasingStyle.Quad,
        easingDirection or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

function Utilities.deepCopy(original)
    local copy = {}
    for k, v in pairs(original) do
        if type(v) == "table" then
            v = Utilities.deepCopy(v)
        end
        copy[k] = v
    end
    return copy
end

function Utilities.sanitize(input)
    if type(input) ~= "string" then return nil, "Invalid input type" end
    return (input:gsub("[%c%z]", ""))
end

function Utilities.isMobile()
    return UserInputService.TouchEnabled
end

function Utilities.getUIScale()
    return Utilities.isMobile() and 0.85 or 1.0
end

--- ==== LOGGER ==== ---
local Logger = {
    entries = {},
    maxEntries = 500
}

function Logger:log(message, level)
    level = level or "INFO"
    local timestamp = os.date("[%H:%M:%S]")
    local entry = string.format("%s [%s] %s", timestamp, level, message)
    
    if #self.entries >= self.maxEntries then
        table.remove(self.entries, 1)
    end
    
    table.insert(self.entries, entry)
    return entry
end

function Logger:dump()
    return table.concat(self.entries, "\n")
end

function Logger:clear()
    self.entries = {}
end

--- ==== DECODERS ==== ---
local Decoders = {}

function Decoders.base64(input)
    if not input or type(input) ~= "string" then
        return nil, "Invalid input type"
    end
    
    local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    local result = {}
    local i = 1
    
    while i <= #input do
        local c1 = input:sub(i,i)
        local c2 = input:sub(i+1,i+1)
        local c3 = input:sub(i+2,i+2)
        local c4 = input:sub(i+3,i+3)
        
        local n1 = (b64chars:find(c1, 1, true) or 0) - 1
        local n2 = (b64chars:find(c2, 1, true) or 0) - 1
        local n3 = (b64chars:find(c3, 1, true) or 0) - 1
        local n4 = (b64chars:find(c4, 1, true) or 0) - 1
        
        table.insert(result, string.char(
            bit32.bor(bit32.lshift(n1, 2), bit32.rshift(n2, 4))
        ))
        
        if c3 ~= '=' then
            table.insert(result, string.char(
                bit32.bor(bit32.lshift(n2, 4), bit32.rshift(n3, 2))
            ))
        end
        
        if c4 ~= '=' then
            table.insert(result, string.char(
                bit32.bor(bit32.lshift(n3, 6), n4)
            ))
        end
        
        i = i + 4
    end
    
    return table.concat(result)
end

function Decoders.hex(input)
    if not input or type(input) ~= "string" then
        return nil, "Invalid input type"
    end
    
    if #input % 2 ~= 0 then
        return nil, "Hex string length must be even"
    end
    
    local result = {}
    for i = 1, #input, 2 do
        local byte = tonumber(input:sub(i,i+1), 16)
        if not byte then
            return nil, "Invalid hex byte at position "..i
        end
        table.insert(result, string.char(byte))
    end
    
    return table.concat(result)
end

function Decoders.rot13(input)
    if not input or type(input) ~= "string" then
        return nil, "Invalid input type"
    end
    
    local lower = "abcdefghijklmnopqrstuvwxyz"
    local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    
    return input:gsub("[a-zA-Z]", function(c)
        if c:match("%l") then
            return lower:sub((lower:find(c) + 12) % 26 + 1)
        else
            return upper:sub((upper:find(c) + 12) % 26 + 1)
        end
    end)
end

function Decoders.xor(input, key)
    if not input or type(input) ~= "string" then
        return nil, "Invalid input type"
    end
    
    key = key or 0x55
    local result = {}
    
    for i = 1, #input do
        table.insert(result, string.char(
            bit32.bxor(input:byte(i), key)
        ))
    end
    
    return table.concat(result)
end

--- ==== DEOBFUSCATION ENGINE ==== ---
local Deobfuscator = {
    variableMap = {},
    lastVarId = 0,
    stringCache = {},
    patterns = {
        BASE64 = "[A-Za-z0-9+/]+=?=?",
        HEX = "\\x%x%x",
        ROT13 = "[A-Za-z]",
        XOR = "[%z%c%x]",
        LOADSTRING = "loadstring%(?[\"']([A-Za-z0-9+/=]+)[\"']%)?",
        G_VAR = "_G%[[\"']([^\"']+)[\"']%]"
    }
}

function Deobfuscator:decodeStrings(code)
    local replacements = {}
    
    -- Base64 detection
    for match in code:gmatch('(["\'])(.-)%1') do
        local quote, content = match[1], match[2]
        if content:match(self.patterns.BASE64) then
            local decoded = Decoders.base64(content)
            if decoded then
                table.insert(replacements, {
                    original = quote..content..quote,
                    replacement = quote..decoded..quote
                })
            end
        end
    end
    
    -- Hex detection
    for match in code:gmatch('(["\'])(.-)%1') do
        local quote, content = match[1], match[2]
        if content:find(self.patterns.HEX) then
            local decoded = Decoders.hex(content:gsub("\\x", ""))
            if decoded then
                table.insert(replacements, {
                    original = quote..content..quote,
                    replacement = quote..decoded..quote
                })
            end
        end
    end
    
    -- Apply all replacements
    for _, rep in ipairs(replacements) do
        code = code:gsub(rep.original:gsub("%p", "%%%0"), rep.replacement, 1)
    end
    
    return code
end

function Deobfuscator:renameVariables(code)
    self.variableMap = {}
    self.lastVarId = 0
    
    -- Pattern 1: _0x1a2b3c
    code = code:gsub("(_0x%x+)", function(match)
        if not self.variableMap[match] then
            self.lastVarId = self.lastVarId + 1
            self.variableMap[match] = string.format("var_%d", self.lastVarId)
        end
        return self.variableMap[match]
    end)
    
    -- Pattern 2: _G["..."]
    code = code:gsub("_G%[[\"']([^\"']+)[\"']%]", function(match)
        if not self.variableMap[match] then
            self.lastVarId = self.lastVarId + 1
            self.variableMap[match] = string.format("gvar_%d", self.lastVarId)
        end
        return self.variableMap[match]
    end)
    
    return code
end

function Deobfuscator:removeDeadCode(code)
    -- Remove empty statements
    code = code:gsub(";[%s\n]*;", ";")
    
    -- Remove dummy assignments
    code = code:gsub("_[%s]*=[%s]*[^;]+;", "")
    
    -- Remove empty blocks
    code = code:gsub("do[%s\n]*end", "")
    
    return code
end

function Deobfuscator:unpackLoadstrings(code)
    local replacements = {}
    
    for match in code:gmatch("(loadstring%(?[\"']([A-Za-z0-9+/=]+)[\"']%)?)") do
        local full, encoded = match[1], match[2]
        local decoded = Decoders.base64(encoded)
        if decoded then
            table.insert(replacements, {
                original = full,
                replacement = decoded
            })
        end
    end
    
    for _, rep in ipairs(replacements) do
        code = code:gsub(rep.original:gsub("%p", "%%%0"), rep.replacement, 1)
    end
    
    return code
end

function Deobfuscator:process(code)
    if type(code) ~= "string" then
        return nil, "Input must be a string"
    end
    
    if #code < 10 then
        return nil, "Input too short to be obfuscated code"
    end
    
    -- Processing pipeline
    local steps = {
        {name = "String Decoding", func = self.decodeStrings},
        {name = "Loadstring Unpacking", func = self.unpackLoadstrings},
        {name = "Variable Renaming", func = self.renameVariables},
        {name = "Dead Code Removal", func = self.removeDeadCode}
    }
    
    for _, step in ipairs(steps) do
        local success, result = pcall(step.func, self, code)
        if not success then
            Logger:log(step.name .. " failed: " .. result, "ERROR")
            return nil, result
        end
        code = result
    end
    
    return code
end

--- ==== UI COMPONENTS ==== ---
local UI = {}

function UI.createFrame(name, size, position, parent, properties)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = size
    frame.Position = position
    
    if properties then
        for prop, value in pairs(properties) do
            frame[prop] = value
        end
    end
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = frame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = COLOR_PALETTE.DARK_3
    stroke.Thickness = 1
    stroke.Parent = frame
    
    if parent then
        frame.Parent = parent
    end
    
    return frame
end

function UI.createLabel(name, text, size, position, parent, properties)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Text = text
    label.Size = size
    label.Position = position
    label.BackgroundTransparency = 1
    label.TextColor3 = COLOR_PALETTE.TEXT_MAIN
    label.Font = FONT_PALETTE.BODY
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    if properties then
        for prop, value in pairs(properties) do
            label[prop] = value
        end
    end
    
    if parent then
        label.Parent = parent
    end
    
    return label
end

function UI.createButton(name, text, size, position, parent, onClick)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Text = text
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = COLOR_PALETTE.ACCENT_1
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = FONT_PALETTE.HEADER
    button.TextSize = 14
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button
    
    if onClick then
        button.MouseButton1Click:Connect(function()
            pcall(onClick)
        end)
    end
    
    if parent then
        button.Parent = parent
    end
    
    return button
end

function UI.createTextBox(name, placeholder, size, position, parent, properties)
    local textBox = Instance.new("TextBox")
    textBox.Name = name
    textBox.PlaceholderText = placeholder
    textBox.Size = size
    textBox.Position = position
    textBox.BackgroundColor3 = COLOR_PALETTE.DARK_3
    textBox.TextColor3 = COLOR_PALETTE.TEXT_MAIN
    textBox.Font = FONT_PALETTE.CODE
    textBox.TextSize = 12
    textBox.MultiLine = true
    textBox.TextWrapped = true
    textBox.ClearTextOnFocus = false
    
    if properties then
        for prop, value in pairs(properties) do
            textBox[prop] = value
        end
    end
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = textBox
    
    if parent then
        textBox.Parent = parent
    end
    
    return textBox
end

--- ==== MAIN WINDOW ==== ---
local Hyperion = {
    gui = nil,
    mainFrame = nil,
    inputBox = nil,
    outputBox = nil,
    settings = {
        autoDecode = true,
        renameVars = true,
        removeDeadCode = true,
        unpackLoadstrings = true
    }
}

function Hyperion:init()
    -- Create main GUI container
    self.gui = Instance.new("ScreenGui")
    self.gui.Name = "HyperionDeobfuscator"
    self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.gui.ResetOnSpawn = false
    
    -- Main window frame
    self.mainFrame = UI.createFrame(
        "MainWindow",
        UDim2.new(0, 600, 0, 700),
        UDim2.new(0.5, -300, 0.5, -350),
        self.gui,
        {
            BackgroundColor3 = COLOR_PALETTE.DARK_1,
            AnchorPoint = Vector2.new(0.5, 0.5)
        }
    )
    
    -- Title bar
    self:createTitleBar()
    
    -- Input section
    self:createInputSection()
    
    -- Output section
    self:createOutputSection()
    
    -- Control panel
    self:createControlPanel()
    
    -- Status bar
    self:createStatusBar()
    
    -- Final setup
    self.gui.Parent = CoreGui
    Logger:log("Hyperion X9000 initialized", "INFO")
end

function Hyperion:createTitleBar()
    local titleBar = UI.createFrame(
        "TitleBar",
        UDim2.new(1, 0, 0, 40),
        UDim2.new(0, 0, 0, 0),
        self.mainFrame,
        {
            BackgroundColor3 = COLOR_PALETTE.DARK_2
        }
    )
    
    UI.createLabel(
        "Title",
        "HYPERION X9000 - ULTIMATE DEOBFUSCATOR",
        UDim2.new(1, -80, 1, 0),
        UDim2.new(0, 10, 0, 0),
        titleBar,
        {
            Font = FONT_PALETTE.TITLE,
            TextSize = 16,
            TextColor3 = COLOR_PALETTE.ACCENT_1
        }
    )
    
    -- Close button
    local closeBtn = Instance.new("ImageButton")
    closeBtn.Name = "CloseButton"
    closeBtn.Image = ICONS.CLOSE
    closeBtn.ImageRectOffset = Vector2.new(284, 4)
    closeBtn.ImageRectSize = Vector2.new(24, 24)
    closeBtn.Position = UDim2.new(1, -30, 0.5, -12)
    closeBtn.Size = UDim2.new(0, 24, 0, 24)
    closeBtn.BackgroundTransparency = 1
    closeBtn.Parent = titleBar
    
    closeBtn.MouseButton1Click:Connect(function()
        self.gui:Destroy()
    end)
end

function Hyperion:createInputSection()
    local container = UI.createFrame(
        "InputSection",
        UDim2.new(1, -20, 0, 200),
        UDim2.new(0, 10, 0, 45),
        self.mainFrame,
        {
            BackgroundTransparency = 1
        }
    )
    
    UI.createLabel(
        "InputLabel",
        "OBFUSCATED CODE:",
        UDim2.new(1, 0, 0, 20),
        UDim2.new(0, 0, 0, 0),
        container,
        {
            Font = FONT_PALETTE.HEADER,
            TextSize = 14,
            TextColor3 = COLOR_PALETTE.ACCENT_2
        }
    )
    
    self.inputBox = UI.createTextBox(
        "InputBox",
        "Paste obfuscated Lua code here...",
        UDim2.new(1, 0, 1, -25),
        UDim2.new(0, 0, 0, 25),
        container,
        {
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top
        }
    )
end

function Hyperion:createOutputSection()
    local container = UI.createFrame(
        "OutputSection",
        UDim2.new(1, -20, 0, 250),
        UDim2.new(0, 10, 0, 255),
        self.mainFrame,
        {
            BackgroundTransparency = 1
        }
    )
    
    UI.createLabel(
        "OutputLabel",
        "CLEAN CODE:",
        UDim2.new(1, 0, 0, 20),
        UDim2.new(0, 0, 0, 0),
        container,
        {
            Font = FONT_PALETTE.HEADER,
            TextSize = 14,
            TextColor3 = COLOR_PALETTE.ACCENT_2
        }
    )
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "OutputScroll"
    scrollFrame.Size = UDim2.new(1, 0, 1, -25)
    scrollFrame.Position = UDim2.new(0, 0, 0, 25)
    scrollFrame.BackgroundColor3 = COLOR_PALETTE.DARK_3
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    scrollFrame.Parent = container
    
    self.outputBox = Instance.new("TextLabel")
    self.outputBox.Name = "OutputContent"
    self.outputBox.Size = UDim2.new(1, -10, 0, 0)
    self.outputBox.Position = UDim2.new(0, 5, 0, 5)
    self.outputBox.Text = ""
    self.outputBox.TextColor3 = COLOR_PALETTE.TEXT_MAIN
    self.outputBox.Font = FONT_PALETTE.CODE
    self.outputBox.TextSize = 12
    self.outputBox.TextXAlignment = Enum.TextXAlignment.Left
    self.outputBox.TextYAlignment = Enum.TextYAlignment.Top
    self.outputBox.TextWrapped = true
    self.outputBox.AutomaticSize = Enum.AutomaticSize.Y
    self.outputBox.BackgroundTransparency = 1
    self.outputBox.Parent = scrollFrame
    
    Instance.new("UICorner", scrollFrame).CornerRadius = UDim.new(0, 6)
end

function Hyperion:createControlPanel()
    local container = UI.createFrame(
        "ControlPanel",
        UDim2.new(1, -20, 0, 40),
        UDim2.new(0, 10, 0, 515),
        self.mainFrame,
        {
            BackgroundTransparency = 1
        }
    )
    
    -- Execute button
    UI.createButton(
        "ExecuteButton",
        "EXECUTE",
        UDim2.new(0.3, 0, 1, 0),
        UDim2.new(0, 0, 0, 0),
        container,
        function()
            self:executeDeobfuscation()
        end
    )
    
    -- Copy button
    UI.createButton(
        "CopyButton",
        "COPY",
        UDim2.new(0.2, 0, 1, 0),
        UDim2.new(0.32, 0, 0, 0),
        container,
        function()
            self:copyOutput()
        end
    )
    
    -- Clear button
    UI.createButton(
        "ClearButton",
        "CLEAR",
        UDim2.new(0.2, 0, 1, 0),
        UDim2.new(0.54, 0, 0, 0),
        container,
        function()
            self:clearAll()
        end
    )
    
    -- Settings button
    UI.createButton(
        "SettingsButton",
        "SETTINGS",
        UDim2.new(0.2, 0, 1, 0),
        UDim2.new(0.8, 0, 0, 0),
        container,
        function()
            self:toggleSettings()
        end
    )
end

function Hyperion:createStatusBar()
    local container = UI.createFrame(
        "StatusBar",
        UDim2.new(1, -20, 0, 20),
        UDim2.new(0, 10, 1, -25),
        self.mainFrame,
        {
            BackgroundTransparency = 1
        }
    )
    
    self.statusLabel = UI.createLabel(
        "StatusText",
        "Ready",
        UDim2.new(1, 0, 1, 0),
        UDim2.new(0, 0, 0, 0),
        container,
        {
            TextColor3 = COLOR_PALETTE.TEXT_DIM,
            TextSize = 12
        }
    )
end

function Hyperion:executeDeobfuscation()
    local code = self.inputBox.Text
    if #code < 10 then
        self:updateStatus("Input too short", COLOR_PALETTE.ERROR)
        return
    end
    
    self:updateStatus("Processing...", COLOR_PALETTE.ACCENT_1)
    
    task.spawn(function()
        local cleanCode, err = Deobfuscator:process(code)
        
        if cleanCode then
            self.outputBox.Text = cleanCode
            self:updateStatus("Deobfuscation complete", COLOR_PALETTE.SUCCESS)
            Logger:log("Deobfuscation successful", "INFO")
        else
            self.outputBox.Text = "ERROR: " .. tostring(err)
            self:updateStatus("Deobfuscation failed", COLOR_PALETTE.ERROR)
            Logger:log("Deobfuscation failed: " .. err, "ERROR")
        end
    end)
end

function Hyperion:copyOutput()
    if #self.outputBox.Text > 0 then
        setclipboard(self.outputBox.Text)
        self:updateStatus("Copied to clipboard", COLOR_PALETTE.SUCCESS)
        
        task.delay(1.5, function()
            if self.statusLabel.Text == "Copied to clipboard" then
                self:updateStatus("Ready", COLOR_PALETTE.TEXT_DIM)
            end
        end)
    end
end

function Hyperion:clearAll()
    self.inputBox.Text = ""
    self.outputBox.Text = ""
    self:updateStatus("Cleared", COLOR_PALETTE.WARNING)
    
    task.delay(1.5, function()
        if self.statusLabel.Text == "Cleared" then
            self:updateStatus("Ready", COLOR_PALETTE.TEXT_DIM)
        end
    end)
end

function Hyperion:toggleSettings()
    -- TODO: Implement settings panel
    self:updateStatus("Settings panel coming soon", COLOR_PALETTE.WARNING)
end

function Hyperion:updateStatus(text, color)
    self.statusLabel.Text = text
    self.statusLabel.TextColor3 = color or COLOR_PALETTE.TEXT_DIM
end

--- ==== INITIALIZATION ==== ---
Hyperion:init()
