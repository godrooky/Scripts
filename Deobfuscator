--!optimize 2
-- Zeta Deobfuscator GUI v9.1 (Ultimate Modular Edition)
-- Features: Military-grade error handling, mobile optimization, modular UI, secure processing

--- ==== MODULE IMPORTS ==== ---
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

--- ==== GLOBAL CONFIG ==== ---
local CONFIG = {
    MAX_LOGS = 200,
    MOBILE_SCALE = 0.85,
    DESKTOP_SCALE = 1.0,
    UI_COLORS = {
        background = Color3.fromRGB(20, 20, 30),
        panel = Color3.fromRGB(25, 25, 35),
        accent = Color3.fromRGB(0, 150, 255),
        text = Color3.fromRGB(220, 220, 220),
        error = Color3.fromRGB(255, 50, 50),
        success = Color3.fromRGB(50, 255, 50)
    },
    FONTS = {
        title = Enum.Font.GothamBold,
        body = Enum.Font.Gotham,
        code = Enum.Font.RobotoMono
    }
}

--- ==== LOGGER MODULE ==== ---
local Logger = {
    logs = {},
    
    add = function(self, message, level)
        level = level or "INFO"
        local timestamp = os.date("[%H:%M:%S]")
        local entry = string.format("%s [%s] %s", timestamp, level, message)
        
        -- Rotate logs if exceeding maximum
        if #self.logs >= CONFIG.MAX_LOGS then
            table.remove(self.logs, 1)
        end
        table.insert(self.logs, entry)
        
        return entry
    end,
    
    flush = function(self)
        return table.concat(self.logs, "\n")
    end,
    
    clear = function(self)
        self.logs = {}
    end
}

--- ==== UTILITY FUNCTIONS ==== ---
local Utils = {
    -- Safely execute a function with error handling
    try = function(func, ...)
        local success, result = pcall(func, ...)
        if not success then
            Logger:add("Runtime error: " .. tostring(result), "ERROR")
            return nil, result
        end
        return result
    end,

    -- Validate and sanitize input strings
    sanitizeInput = function(input)
        if type(input) ~= "string" then return nil, "Invalid input type" end
        -- Prevent potential injection (if processing external data)
        return (input:gsub("[%c%z]", "")) -- Remove control chars
    end,

    -- Check if platform is mobile
    isMobile = function()
        return UserInputService.TouchEnabled
    end,

    -- Get dynamic UI scale factor
    getUIScale = function()
        return Utils.isMobile() and CONFIG.MOBILE_SCALE or CONFIG.DESKTOP_SCALE
    end
}

--- ==== DECODER MODULE ==== ---
local Decoders = {
    -- Cache Base64 lookup table for performance
    _b64Lookup = {
        ['A']=0,['B']=1,['C']=2,['D']=3,['E']=4,['F']=5,['G']=6,['H']=7,
        ['I']=8,['J']=9,['K']=10,['L']=11,['M']=12,['N']=13,['O']=14,['P']=15,
        ['Q']=16,['R']=17,['S']=18,['T']=19,['U']=20,['V']=21,['W']=22,['X']=23,
        ['Y']=24,['Z']=25,['a']=26,['b']=27,['c']=28,['d']=29,['e']=30,['f']=31,
        ['g']=32,['h']=33,['i']=34,['j']=35,['k']=36,['l']=37,['m']=38,['n']=39,
        ['o']=40,['p']=41,['q']=42,['r']=43,['s']=44,['t']=45,['u']=46,['v']=47,
        ['w']=48,['x']=49,['y']=50,['z']=51,['0']=52,['1']=53,['2']=54,['3']=55,
        ['4']=56,['5']=57,['6']=58,['7']=59,['8']=60,['9']=61,['+']=62,['/']=63
    },

    -- Base64 decoder with validation
    base64 = function(encoded)
        if not encoded or type(encoded) ~= "string" then
            return nil, "Invalid input type"
        end
        
        encoded = encoded:gsub("[^%w%+/=]", "")
        local result = {}
        local i = 1
        
        while i <= #encoded do
            local c1 = Decoders._b64Lookup[encoded:sub(i,i)] or 0
            local c2 = Decoders._b64Lookup[encoded:sub(i+1,i+1)] or 0
            local c3 = Decoders._b64Lookup[encoded:sub(i+2,i+2)] or 0
            local c4 = Decoders._b64Lookup[encoded:sub(i+3,i+3)] or 0
            
            table.insert(result, string.char(
                bit32.bor(bit32.lshift(c1, 2), bit32.rshift(c2, 4))
            ))
            
            if c3 then
                table.insert(result, string.char(
                    bit32.bor(bit32.lshift(c2, 4), bit32.rshift(c3, 2))
                ))
            end
            
            if c4 then
                table.insert(result, string.char(
                    bit32.bor(bit32.lshift(c3, 6), c4)
                ))
            end
            
            i = i + 4
        end
        
        return table.concat(result)
    end,

    -- Hex decoder with validation
    hex = function(encoded)
        if not encoded or #encoded % 2 ~= 0 then
            return nil, "Invalid hex string length"
        end
        
        local result = {}
        for i = 1, #encoded, 2 do
            local byte = tonumber(encoded:sub(i,i+1), 16)
            if not byte then
                return nil, "Invalid hex byte at position "..i
            end
            table.insert(result, string.char(byte))
        end
        
        return table.concat(result)
    end
}

--- ==== DEOBFUSCATION ENGINE ==== ---
local Deobfuscator = {
    variableMap = {},
    lastVarId = 0,
    
    -- Decode obfuscated strings
    decodeStrings = function(self, code)
        local replacements = {}
        
        -- Process all string literals
        for quoted in code:gmatch('(["\'])(.-)%1') do
            local quote, content = quoted[1], quoted[2]
            local decoded, err
            
            -- Hex detection
            if content:find("\\x%x%x") then
                decoded, err = Decoders.hex(content:gsub("\\x", ""))
            
            -- Base64 detection
            elseif content:match("^[A-Za-z0-9+/]+=?=?$") then
                decoded, err = Decoders.base64(content)
            end
            
            if decoded then
                table.insert(replacements, {
                    original = quote..content..quote,
                    replacement = quote..decoded..quote
                })
            elseif err then
                Logger:add("Decode failed: "..err, "WARN")
            end
        end
        
        -- Apply replacements
        for _, rep in ipairs(replacements) do
            code = code:gsub(rep.original:gsub("%p", "%%%0"), rep.replacement, 1)
        end
        
        return code
    end,
    
    -- Rename variables systematically
    renameVariables = function(self, code)
        self.variableMap = {}
        self.lastVarId = 0
        
        -- Pattern 1: _0x1a2b3c
        code = code:gsub("(_0x%x+)", function(match)
            if not self.variableMap[match] then
                self.lastVarId = self.lastVarId + 1
                self.variableMap[match] = string.format("var_%d", self.lastVarId)
            end
            return self.variableMap[match]
        end)
        
        -- Pattern 2: _[1] array access
        code = code:gsub("(_%[%d+%])", function(match)
            local num = match:match("%d+")
            return string.format("arr_%s", num)
        end)
        
        return code
    end,
    
    -- Format code for readability
    formatCode = function(self, code)
        return code:gsub("%s+", " ")                -- Collapse whitespace
                  :gsub("%s*([%;%,%)%}])%s*", "%1") -- Clean right side
                  :gsub("([%(%{%[])%s*", "%1")      -- Clean left side
                  :gsub("\n%s*\n", "\n")            -- Remove empty lines
    end,
    
    -- Main processing pipeline
    process = function(self, code)
        if type(code) ~= "string" then
            return nil, "Input must be a string"
        end
        
        if #code < 10 then
            return nil, "Input too short to be obfuscated code"
        end
        
        -- Processing steps with error handling
        local steps = {
            {name = "String Decoding", func = self.decodeStrings},
            {name = "Variable Renaming", func = self.renameVariables},
            {name = "Code Formatting", func = self.formatCode}
        }
        
        for _, step in ipairs(steps) do
            local success, result = Utils.try(step.func, self, code)
            if not success then
                Logger:add(step.name .. " failed: " .. result, "ERROR")
                return nil, result
            end
            code = result
        end
        
        return code
    end
}

--- ==== UI COMPONENTS MODULE ==== ---
local UIComponents = {
    -- Create a basic frame with common properties
    createFrame = function(name, size, position, parent, additionalProps)
        local frame = Instance.new("Frame")
        frame.Name = name
        frame.Size = size
        frame.Position = position
        
        -- Apply additional properties if provided
        if additionalProps then
            for prop, value in pairs(additionalProps) do
                frame[prop] = value
            end
        end
        
        -- Standard styling
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = frame
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = CONFIG.UI_COLORS.panel
        stroke.Thickness = 2
        stroke.Parent = frame
        
        if parent then
            frame.Parent = parent
        end
        
        return frame
    end,
    
    -- Create a text label
    createLabel = function(name, text, size, position, parent, textSize, font)
        local label = Instance.new("TextLabel")
        label.Name = name
        label.Text = text
        label.Size = size
        label.Position = position
        label.BackgroundTransparency = 1
        label.TextColor3 = CONFIG.UI_COLORS.text
        label.TextSize = textSize or 14
        label.Font = font or CONFIG.FONTS.body
        label.TextXAlignment = Enum.TextXAlignment.Left
        
        if parent then
            label.Parent = parent
        end
        
        return label
    end,
    
    -- Create a button with click handler
    createButton = function(name, text, size, position, parent, onClick)
        local button = Instance.new("TextButton")
        button.Name = name
        button.Text = text
        button.Size = size
        button.Position = position
        button.BackgroundColor3 = CONFIG.UI_COLORS.accent
        button.TextColor3 = Color3.new(1, 1, 1)
        button.Font = CONFIG.FONTS.body
        button.TextSize = 14
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = button
        
        if onClick then
            button.MouseButton1Click:Connect(function()
                Utils.try(onClick)
            end)
        end
        
        if parent then
            button.Parent = parent
        end
        
        return button
    end,
    
    -- Create a text input box
    createTextBox = function(name, placeholder, size, position, parent)
        local textBox = Instance.new("TextBox")
        textBox.Name = name
        textBox.PlaceholderText = placeholder
        textBox.Size = size
        textBox.Position = position
        textBox.BackgroundColor3 = CONFIG.UI_COLORS.panel
        textBox.TextColor3 = CONFIG.UI_COLORS.text
        textBox.Font = CONFIG.FONTS.code
        textBox.TextSize = 12
        textBox.MultiLine = true
        textBox.TextWrapped = true
        textBox.ClearTextOnFocus = false
        
        Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, 8)
        
        if parent then
            textBox.Parent = parent
        end
        
        return textBox
    end
}

--- ==== MAIN UI MODULE ==== ---
local MainUI = {
    gui = nil,
    inputBox = nil,
    outputContent = nil,
    
    -- Initialize the main window
    init = function(self)
        local scale = Utils.getUIScale()
        
        -- Create main GUI container
        self.gui = Instance.new("ScreenGui")
        self.gui.Name = "ZetaDeobfuscator"
        self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        self.gui.ResetOnSpawn = false
        
        -- Main window frame
        local mainFrame = UIComponents.createFrame(
            "MainWindow",
            UDim2.new(0, 500 * scale, 0, 600 * scale),
            UDim2.new(0.5, -250 * scale, 0.5, -300 * scale),
            self.gui,
            {
                BackgroundColor3 = CONFIG.UI_COLORS.background,
                AnchorPoint = Vector2.new(0.5, 0.5)
            }
        )
        
        -- Title bar
        self:createTitleBar(mainFrame)
        
        -- Input section
        local inputSection = self:createInputSection(mainFrame)
        self.inputBox = inputSection.inputBox
        
        -- Output section
        local outputSection = self:createOutputSection(mainFrame)
        self.outputContent = outputSection.outputContent
        
        -- Action buttons
        self:createActionButtons(mainFrame)
        
        -- Initial message
        self.outputContent.Text = "Paste obfuscated code above and click Deobfuscate"
        
        self.gui.Parent = CoreGui
        Logger:add("UI initialized", "INFO")
    end,
    
    -- Create the title bar with close button
    createTitleBar = function(self, parent)
        local titleBar = UIComponents.createFrame(
            "TitleBar",
            UDim2.new(1, 0, 0, 40),
            UDim2.new(0, 0, 0, 0),
            parent,
            {
                BackgroundColor3 = Color3.fromRGB(15, 15, 25)
            }
        )
        
        UIComponents.createLabel(
            "Title",
            "ZETA DEOBFUSCATOR v9.1",
            UDim2.new(1, -40, 1, 0),
            UDim2.new(0, 10, 0, 0),
            titleBar,
            16,
            CONFIG.FONTS.title
        )
        
        -- Close button
        local closeBtn = Instance.new("ImageButton")
        closeBtn.Name = "CloseButton"
        closeBtn.Image = "rbxassetid://3926305904"
        closeBtn.ImageRectOffset = Vector2.new(284, 4)
        closeBtn.ImageRectSize = Vector2.new(24, 24)
        closeBtn.Position = UDim2.new(1, -30, 0.5, -12)
        closeBtn.Size = UDim2.new(0, 24, 0, 24)
        closeBtn.BackgroundTransparency = 1
        closeBtn.Parent = titleBar
        
        closeBtn.MouseButton1Click:Connect(function()
            self.gui:Destroy()
        end)
    end,
    
    -- Create the input section
    createInputSection = function(self, parent)
        local container = UIComponents.createFrame(
            "InputSection",
            UDim2.new(1, -20, 0, 180),
            UDim2.new(0, 10, 0, 45),
            parent,
            { BackgroundTransparency = 1 }
        )
        
        UIComponents.createLabel(
            "InputLabel",
            "Obfuscated Script:",
            UDim2.new(1, 0, 0, 20),
            UDim2.new(0, 0, 0, 0),
            container,
            14
        )
        
        local inputBox = UIComponents.createTextBox(
            "InputBox",
            "Paste obfuscated loadstring here...",
            UDim2.new(1, 0, 1, -25),
            UDim2.new(0, 0, 0, 25),
            container
        )
        
        return {
            container = container,
            inputBox = inputBox
        }
    end,
    
    -- Create the output section
    createOutputSection = function(self, parent)
        local container = UIComponents.createFrame(
            "OutputSection",
            UDim2.new(1, -20, 0, 250),
            UDim2.new(0, 10, 0, 235),
            parent,
            { BackgroundTransparency = 1 }
        )
        
        UIComponents.createLabel(
            "OutputLabel",
            "Deobfuscated Script:",
            UDim2.new(1, 0, 0, 20),
            UDim2.new(0, 0, 0, 0),
            container,
            14
        )
        
        local scrollFrame = Instance.new("ScrollingFrame")
        scrollFrame.Name = "OutputScroll"
        scrollFrame.Size = UDim2.new(1, 0, 1, -25)
        scrollFrame.Position = UDim2.new(0, 0, 0, 25)
        scrollFrame.BackgroundColor3 = CONFIG.UI_COLORS.panel
        scrollFrame.ScrollBarThickness = 6
        scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        scrollFrame.Parent = container
        
        local outputContent = Instance.new("TextLabel")
        outputContent.Name = "OutputContent"
        outputContent.Size = UDim2.new(1, -10, 0, 0)
        outputContent.Position = UDim2.new(0, 5, 0, 5)
        outputContent.Text = ""
        outputContent.TextColor3 = CONFIG.UI_COLORS.text
        outputContent.Font = CONFIG.FONTS.code
        outputContent.TextSize = 12
        outputContent.TextXAlignment = Enum.TextXAlignment.Left
        outputContent.TextYAlignment = Enum.TextYAlignment.Top
        outputContent.TextWrapped = true
        outputContent.AutomaticSize = Enum.AutomaticSize.Y
        outputContent.BackgroundTransparency = 1
        outputContent.Parent = scrollFrame
        
        Instance.new("UICorner", scrollFrame).CornerRadius = UDim.new(0, 8)
        
        return {
            container = container,
            outputContent = outputContent
        }
    end,
    
    -- Create action buttons (Deobfuscate, Copy)
    createActionButtons = function(self, parent)
        local container = UIComponents.createFrame(
            "ButtonContainer",
            UDim2.new(1, -20, 0, 40),
            UDim2.new(0, 10, 1, -50),
            parent,
            { BackgroundTransparency = 1 }
        )
        
        -- Deobfuscate button
        UIComponents.createButton(
            "DeobfuscateButton",
            "DEOBFUSCATE",
            UDim2.new(0.45, 0, 1, 0),
            UDim2.new(0, 0, 0, 0),
            container,
            function()
                self:onDeobfuscateClick()
            end
        )
        
        -- Copy button
        UIComponents.createButton(
            "CopyButton",
            "COPY CLEAN CODE",
            UDim2.new(0.45, 0, 1, 0),
            UDim2.new(0.55, 0, 0, 0),
            container,
            function()
                self:onCopyClick()
            end
        )
    end,
    
    -- Handle deobfuscation button click
    onDeobfuscateClick = function(self)
        local code = self.inputBox.Text
        if #code < 10 then
            self:updateOutput("Error: Input too short (min 10 chars)", true)
            return
        end
        
        -- Process the code
        local cleanCode, err = Deobfuscator:process(code)
        if cleanCode then
            self:updateOutput(cleanCode)
            Logger:add("Deobfuscation successful", "INFO")
        else
            self:updateOutput("Error: " .. tostring(err), true)
            Logger:add("Deobfuscation failed: " .. err, "ERROR")
        end
    end,
    
    -- Handle copy button click
    onCopyClick = function(self)
        if #self.outputContent.Text > 0 then
            setclipboard(self.outputContent.Text)
            self:updateOutput("Copied to clipboard!", false, CONFIG.UI_COLORS.success)
            task.delay(1.5, function()
                self:updateOutput(self.outputContent.Text) -- Restore original text
            end)
        end
    end,
    
    -- Update output with optional error styling
    updateOutput = function(self, text, isError, color)
        self.outputContent.Text = text
        self.outputContent.TextColor3 = color or (isError and CONFIG.UI_COLORS.error or CONFIG.UI_COLORS.text)
        
        -- Auto-scroll to bottom
        task.defer(function()
            self.outputContent.Parent.CanvasPosition = Vector2.new(0, self.outputContent.AbsoluteSize.Y)
        end)
    end
}

--- ==== INITIALIZATION ==== ---
MainUI:init()
Logger:add("Zeta Deobfuscator started", "INFO")
